class EggGame {
    constructor() {
        this.instruction = document.getElementById('instruction');
        this.petContainer = document.querySelector('.pet-container');

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä swipe_count –∏–∑ URL
        const params = new URLSearchParams(window.location.search);
        this.swipeCount = parseInt(params.get('swipe_count')) || 0;

        this.cracked = false;
        this.isMouseDown = false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram Web App
        if (!window.Telegram?.WebApp) {
            alert("–≠—Ç–∞ –∏–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ Telegram Web App!");
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Three.js
        this.initThreeJS();

        this.init();
    }

    initThreeJS() {
        const container = document.getElementById('egg-container');

        // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É, –∫–∞–º–µ—Ä—É –∏ —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({ antialias: true });
        this.renderer.setSize(200, 200); // –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container.appendChild(this.renderer.domElement);

        // –û—Å–≤–µ—â–µ–Ω–∏–µ
        const light = new THREE.AmbientLight(0xffffff, 1);
        this.scene.add(light);

        // –ö–∞–º–µ—Ä–∞
        this.camera.position.z = 5;

        // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        const loader = new THREE.OBJLoader();
        loader.load(
            'models/egg_3d.obj', // –ü—É—Ç—å –∫ .obj —Ñ–∞–π–ª—É
            (object) => {
                object.scale.set(0.5, 0.5, 0.5); // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
                object.position.y = -1; // –ü–æ–¥–Ω–∏–º–∞–µ–º –º–æ–¥–µ–ª—å –Ω–µ–º–Ω–æ–≥–æ –≤–≤–µ—Ä—Ö
                this.scene.add(object);
            },
            (xhr) => {
                console.log((xhr.loaded / xhr.total * 100) + '% –∑–∞–≥—Ä—É–∂–µ–Ω–æ...');
            },
            (error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏:', error);
            }
        );

        // –ê–Ω–∏–º–∞—Ü–∏—è
        this.animate();
    }

    animate() {
        requestAnimationFrame(() => this.animate());

        // –í—Ä–∞—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if (this.scene.children.length > 0) {
            this.scene.children[0].rotation.x += 0.01;
            this.scene.children[0].rotation.y += 0.01;
        }

        this.renderer.render(this.scene, this.camera);
    }

    init() {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è–π—Ü–∞
        if (this.swipeCount >= 4) this.scene.children[0]?.classList.add('crack1');
        if (this.swipeCount >= 7) this.scene.children[0]?.classList.add('crack2');
        if (this.swipeCount >= 10) {
            this.hatchEgg();
            return;
        }

        this.instruction.textContent = `–û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∏–∂–µ–Ω–∏–π: ${10 - this.swipeCount}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.addEventListener('touchstart', this.handleTouchStart.bind(this));
        document.addEventListener('touchend', this.handleTouchEnd.bind(this));
        document.addEventListener('mousedown', this.handleMouseDown.bind(this));
        document.addEventListener('mousemove', this.handleMouseMove.bind(this));
        document.addEventListener('mouseup', this.handleMouseUp.bind(this));

        // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º—è —Å–≤–∞–π–ø–∞
        document.body.addEventListener('touchmove', (e) => e.preventDefault(), { passive: false });
    }

    handleMouseDown(e) {
        this.isMouseDown = true;
        this.startX = e.clientX;
    }

    handleMouseMove(e) {
        if (!this.isMouseDown || this.cracked) return;

        const currentX = e.clientX;
        const distance = currentX - this.startX;

        if (Math.abs(distance) > 30) {
            this.swipeCount++;
            this.updateGameState();
            this.startX = currentX;
        }
    }

    handleMouseUp() {
        this.isMouseDown = false;
    }

    handleTouchStart(e) {
        this.startX = e.touches[0].clientX;
    }

    handleTouchEnd(e) {
        if (this.cracked) return;

        const endX = e.changedTouches[0].clientX;
        const distance = endX - this.startX;

        if (Math.abs(distance) > 30) {
            this.swipeCount++;
            this.updateGameState();
        }
    }

    updateGameState() {
        this.instruction.textContent = `–û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∏–∂–µ–Ω–∏–π: ${10 - this.swipeCount}`;

        if (this.swipeCount >= 4) this.scene.children[0]?.classList.add('crack1');
        if (this.swipeCount >= 7) this.scene.children[0]?.classList.add('crack2');
        if (this.swipeCount >= 10) this.hatchEgg();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
        this.sendTelegramData();
    }

    hatchEgg() {
        this.cracked = true;
        this.instruction.classList.add('hidden');

        setTimeout(() => {
            const pet = this.generateRandomPet();
            console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", pet); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            this.showPet(pet);
            this.sendTelegramData(pet);
        }, 800);
    }

    generateRandomPet() {
        const uniqueNames = [
            "–ë–∞—Ä—Å–∏–∫", "–ú—É—Ä–∑–∏–∫", "–®–∞—Ä–∏–∫", "–°–Ω–µ–∂–æ–∫", "–†—ã–∂–∏–∫",
            "–ó–≤—ë–∑–¥–æ—á–∫–∞", "–ü—É—à–∏—Å—Ç–∏–∫", "–õ—É–Ω—Ç–∏–∫", "–°–ø–∞—Ä–∫–∏", "–¢—É—á–∫–∞",
            "–ö–æ–º–µ—Ç–∞", "–ë—É—Å–∏–Ω–∫–∞", "–í—É–ª–∫–∞–Ω", "–ú–∞—Ä—Å–∏–∫", "–°–∏–º–±–∞",
            "–¢–∏–≥—Ä–∞", "–ü–µ—Ä—Å–∏–∫", "–û–±–ª–∞—á–∫–æ", "–§–µ–Ω–∏–∫—Å"
        ];

        const index = Math.floor(Math.random() * uniqueNames.length);
        return {
            name: uniqueNames[index],
            img: `https://maximus9431.github.io/game/pets/pet${index + 1}.jpg`
        };
    }

    showPet(pet) {
        this.petContainer.innerHTML = `
            <img src="${pet.img}" class="pet">
            <div class="pet-name">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ ${pet.name} üêæ</div>
        `;
        this.petContainer.classList.add('visible');
    }

    sendTelegramData(pet = null) {
        try {
            let data = {
                level: 1,
                actions: this.swipeCount,
                pet: pet?.name || null,
                img: pet?.img || null
            };

            if (window.Telegram?.WebApp?.sendData) {
                window.Telegram.WebApp.sendData(JSON.stringify(data));
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e);
        }
    }
}

window.addEventListener('DOMContentLoaded', () => new EggGame());