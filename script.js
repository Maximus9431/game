class EggGame {
    constructor() {
      this.instruction = document.getElementById("instruction");
      this.eggContainer = document.getElementById("egg-container");
      this.petContainer = document.querySelector(".pet-container");
      this.shopContainer = document.getElementById("shop");
      this.questsContainer = document.getElementById("quests-list");
      this.leaderboardContainer = document.getElementById("leaderboard-list");
      this.tabs = document.querySelectorAll(".tab-button");
      this.tabContents = document.querySelectorAll(".tab-content");
  
      this.cracked = false;
      this.isMouseDown = false;
      this.swipeCount = 0;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç—ã –∏–∑ localStorage –∏–ª–∏ –∑–∞–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      this.quests = JSON.parse(localStorage.getItem("quests")) || [
        { id: 1, title: "–†–∞–∑–±–µ–π 3 —è–π—Ü–∞", required: 3, progress: 0, reward: 10, claimed: false },
        { id: 2, title: "–ù–∞–π–¥–∏ —Ä–µ–¥–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞", required: 1, progress: 0, reward: 20, claimed: false },
        { id: 3, title: "–°–¥–µ–ª–∞–π 15 —Å–≤–∞–π–ø–æ–≤", required: 15, progress: 0, reward: 15, claimed: false }
      ];
      this.saveQuests();
  
      if (!window.Telegram?.WebApp) {
        alert("–≠—Ç–∞ –∏–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ Telegram Web App!");
        return;
      }
  
      this.init();
    }
  
    init() {
      this.loadRandomEgg();
      this.instruction.textContent = `–û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∏–∂–µ–Ω–∏–π: ${10 - this.swipeCount}`;
  
      document.addEventListener("touchstart", this.handleTouchStart.bind(this));
      document.addEventListener("touchend", this.handleTouchEnd.bind(this));
      document.addEventListener("mousedown", this.handleMouseDown.bind(this));
      document.addEventListener("mousemove", this.handleMouseMove.bind(this));
      document.addEventListener("mouseup", this.handleMouseUp.bind(this));
  
      this.loadTabs();
    }
  
    loadTabs() {
      // –°–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–æ –≤—ã–ª—É–ø–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
      this.tabs.forEach(tab => (tab.style.display = "none"));
  
      // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤–∏–¥–∏–º—ã–º–∏
    }
  
    showTabs() {
      this.tabs.forEach(tab => (tab.style.display = "inline-block"));
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
      this.switchTab(this.tabs[0]);
      this.tabContents.forEach(content => content.style.display = "none");
      document.getElementById("shop").style.display = "block"; // –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ - –º–∞–≥–∞–∑–∏–Ω
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
      this.loadShop();
      this.loadQuests();
      this.loadLeaderboard();
    }
  
    switchTab(tab) {
      this.tabs.forEach(t => t.classList.remove("active"));
      this.tabContents.forEach(content => (content.style.display = "none"));
  
      tab.classList.add("active");
      const contentId = tab.id.replace("-tab", "");
      document.getElementById(contentId).style.display = "block";
    }
  
    loadRandomEgg() {
      const eggCount = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ PNG —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ /eggs
      const randomIndex = Math.floor(Math.random() * eggCount) + 1;
  
      this.eggImage = document.createElement("img");
      this.eggImage.src = `eggs/egg${randomIndex}.png`;
      this.eggImage.id = "egg-image";
      this.eggImage.classList.add("egg");
      this.eggContainer.innerHTML = "";
      this.eggContainer.appendChild(this.eggImage);
    }
  
    handleMouseDown(e) {
      this.isMouseDown = true;
      this.startX = e.clientX;
    }
  
    handleMouseMove(e) {
      if (!this.isMouseDown || this.cracked) return;
  
      const distance = e.clientX - this.startX;
      if (Math.abs(distance) > 30) {
        this.swipeCount++;
        this.updateGameState();
        this.startX = e.clientX;
      }
    }
  
    handleMouseUp() {
      this.isMouseDown = false;
    }
  
    handleTouchStart(e) {
      this.startX = e.touches[0].clientX;
    }
  
    handleTouchEnd(e) {
      if (this.cracked) return;
  
      const distance = e.changedTouches[0].clientX - this.startX;
      if (Math.abs(distance) > 30) {
        this.swipeCount++;
        this.updateGameState();
      }
    }
  
    updateGameState() {
      this.instruction.textContent = `–û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∏–∂–µ–Ω–∏–π: ${10 - this.swipeCount}`;
  
      if (this.swipeCount >= 4) this.eggImage.classList.add("crack1");
      if (this.swipeCount >= 7) this.eggImage.classList.add("crack2");
      if (this.swipeCount >= 10) this.hatchEgg();
  
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—ã—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–≤–∞–π–ø–æ–≤)
      this.updateQuests("swipe", 1);
      this.sendTelegramData();
    }
  
    hatchEgg() {
      this.cracked = true;
      this.instruction.classList.add("hidden");
  
      setTimeout(() => {
        const pet = this.generateRandomPet();
        this.showPet(pet);
        this.showTabs();
        this.sendTelegramData(pet);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç "–†–∞–∑–±–µ–π 3 —è–π—Ü–∞" –∏ "–ù–∞–π–¥–∏ —Ä–µ–¥–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞" - —É—Å–ª–æ–≤–Ω–æ
        this.updateQuests("eggCracked", 1);
        this.saveQuests();
        this.loadQuests();
      }, 800);
    }
  
    generateRandomPet() {
      const pets = [
        { name: "–ë–∞—Ä—Å–∏–∫", img: "https://maximus9431.github.io/game/pets/pet1.jpg", rarity: "–û–±—ã—á–Ω—ã–π" },
        { name: "–ú—É—Ä–∑–∏–∫", img: "https://maximus9431.github.io/game/pets/pet2.jpg", rarity: "–û–±—ã—á–Ω—ã–π" },
        { name: "–®–∞—Ä–∏–∫", img: "https://maximus9431.github.io/game/pets/pet3.jpg", rarity: "–ù–µ–æ–±—ã—á–Ω—ã–π" },
        { name: "–°–Ω–µ–∂–æ–∫", img: "https://maximus9431.github.io/game/pets/pet4.jpg", rarity: "–ù–µ–æ–±—ã—á–Ω—ã–π" },
        { name: "–†—ã–∂–∏–∫", img: "https://maximus9431.github.io/game/pets/pet5.jpg", rarity: "–†–µ–¥–∫–∏–π" },
        { name: "–ó–≤—ë–∑–¥–æ—á–∫–∞", img: "https://maximus9431.github.io/game/pets/pet6.jpg", rarity: "–†–µ–¥–∫–∏–π" },
        { name: "–ü—É—à–∏—Å—Ç–∏–∫", img: "https://maximus9431.github.io/game/pets/pet7.jpg", rarity: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π" },
        { name: "–õ—É–Ω—Ç–∏–∫", img: "https://maximus9431.github.io/game/pets/pet8.jpg", rarity: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π" }
      ];
  
      const rarityWeights = {
        "–û–±—ã—á–Ω—ã–π": 0.6,
        "–ù–µ–æ–±—ã—á–Ω—ã–π": 0.3,
        "–†–µ–¥–∫–∏–π": 0.09,
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 0.01
      };
  
      const getRandomPet = () => {
        const random = Math.random();
        let cumulativeWeight = 0;
  
        for (const pet of pets) {
          cumulativeWeight += rarityWeights[pet.rarity];
          if (random <= cumulativeWeight) {
            return pet;
          }
        }
        return pets[0];
      };
  
      return getRandomPet();
    }
  
    showPet(pet) {
      this.eggContainer.classList.add("hidden");
      this.petContainer.innerHTML = `
        <img src="${pet.img}" class="pet">
        <div class="pet-name">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ ${pet.name} üêæ</div>
        <div class="pet-rarity">–†–µ–¥–∫–æ—Å—Ç—å: ${pet.rarity}</div>
      `;
      this.petContainer.classList.add("visible");
    }
  
    loadShop() {
      document.getElementById("buy-egg").addEventListener("click", () => {
        alert("–í—ã –∫—É–ø–∏–ª–∏ —è–π—Ü–æ –∑–∞ 10 –º–æ–Ω–µ—Ç!");
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
      });
  
      document.getElementById("buy-food").addEventListener("click", () => {
        alert("–í—ã –∫—É–ø–∏–ª–∏ –∫–æ—Ä–º –∑–∞ 5 –º–æ–Ω–µ—Ç!");
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
      });
    }
  
    loadQuests() {
      this.questsContainer.innerHTML = "";
      this.quests.forEach(quest => {
        const questEl = document.createElement("div");
        questEl.classList.add("quest");
        questEl.innerHTML = `
          <strong>${quest.title}</strong><br>
          –ü—Ä–æ–≥—Ä–µ—Å—Å: ${quest.progress}/${quest.required}<br>
          –ù–∞–≥—Ä–∞–¥–∞: ${quest.reward} –º–æ–Ω–µ—Ç
        `;
        if (quest.progress >= quest.required && !quest.claimed) {
          const claimBtn = document.createElement("button");
          claimBtn.textContent = "–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É";
          claimBtn.addEventListener("click", () => {
            quest.claimed = true;
            alert(`–ù–∞–≥—Ä–∞–¥–∞ ${quest.reward} –º–æ–Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞!`);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –∫ –±–∞–ª–∞–Ω—Å—É
            this.saveQuests();
            this.loadQuests();
          });
          questEl.appendChild(claimBtn);
        } else if (quest.claimed) {
          questEl.innerHTML += "<br><em>–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞</em>";
        }
        this.questsContainer.appendChild(questEl);
      });
      this.saveQuests();
    }
  
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    updateQuests(eventType, amount) {
      this.quests.forEach(quest => {
        // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∫–≤–µ—Å—Ç "–†–∞–∑–±–µ–π 3 —è–π—Ü–∞" –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ "eggCracked"
        if (eventType === "eggCracked" && quest.id === 1) {
          quest.progress += amount;
        }
        // –ï—Å–ª–∏ –∫–≤–µ—Å—Ç "–°–¥–µ–ª–∞–π 15 —Å–≤–∞–π–ø–æ–≤" –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ "swipe"
        if (eventType === "swipe" && quest.id === 3) {
          quest.progress += amount;
        }
        // –ï—Å–ª–∏ –∫–≤–µ—Å—Ç "–ù–∞–π–¥–∏ —Ä–µ–¥–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞" ‚Äî –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é "–†–µ–¥–∫–∏–π" –∏–ª–∏ "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"
        if (eventType === "eggCracked" && quest.id === 2) {
          // –î–æ–ø—É—Å—Ç–∏–º, –µ—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —Ä–µ–¥–∫–∏–π –∏–ª–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          // (—ç—Ç—É –ª–æ–≥–∏–∫—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ hatchEgg, –µ—Å–ª–∏ pet.rarity —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç)
        }
      });
      this.saveQuests();
    }
  
    saveQuests() {
      localStorage.setItem("quests", JSON.stringify(this.quests));
    }
  
    loadLeaderboard() {
      // –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
      const leaderboard = [
        { name: "–ò–≥—Ä–æ–∫ 1", score: 100 },
        { name: "–ò–≥—Ä–æ–∫ 2", score: 90 },
        { name: "–ò–≥—Ä–æ–∫ 3", score: 80 }
      ];
      this.leaderboardContainer.innerHTML = "";
      leaderboard.forEach(entry => {
        const entryEl = document.createElement("div");
        entryEl.textContent = `${entry.name} ‚Äî ${entry.score} –æ—á–∫–æ–≤`;
        this.leaderboardContainer.appendChild(entryEl);
      });
    }
  
    sendTelegramData(pet = null) {
      try {
        const data = {
          level: 1,
          actions: this.swipeCount,
          pet: pet?.name || null,
          img: pet?.img || null,
          rarity: pet?.rarity || null
        };
  
        if (window.Telegram?.WebApp?.sendData) {
          window.Telegram.WebApp.sendData(JSON.stringify(data));
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e);
      }
    }
  }
  
  window.addEventListener("DOMContentLoaded", () => {
    const game = new EggGame();
  
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    document.getElementById("shop-tab").addEventListener("click", () => {
      game.switchTab(document.getElementById("shop-tab"));
    });
    document.getElementById("quests-tab").addEventListener("click", () => {
      game.switchTab(document.getElementById("quests-tab"));
    });
    document.getElementById("leaderboard-tab").addEventListener("click", () => {
      game.switchTab(document.getElementById("leaderboard-tab"));
    });
  });
  