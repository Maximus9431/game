class EggGame {
    constructor() {
        this.egg = document.getElementById('egg');
        this.instruction = document.getElementById('instruction');
        this.container = document.querySelector('.container');
        this.petContainer = document.querySelector('.pet-container');
        this.swipeCount = 0;
        this.cracked = false;

        this.init();
    }

    init() {
        const eggColors = ['blue', 'green', 'red', 'pink', 'yellow'];
        this.egg.src = `eggs/${eggColors[Math.floor(Math.random() * eggColors.length)]}.png`;

        document.addEventListener('touchstart', this.handleTouchStart.bind(this));
        document.addEventListener('touchend', this.handleTouchEnd.bind(this));


        document.body.addEventListener('touchmove', (e) => e.preventDefault(), { passive: false });
    }

    handleTouchStart(e) {
        this.startX = e.touches[0].clientX;
    }

    handleTouchEnd(e) {
        if (this.cracked) return;

        const endX = e.changedTouches[0].clientX;
        const distance = endX - this.startX;

        if (Math.abs(distance) > 30) {
            this.swipeCount++;
            this.updateGameState();
        }
    }

    updateGameState() {
        this.instruction.textContent = `–û—Å—Ç–∞–ª–æ—Å—å –¥–≤–∏–∂–µ–Ω–∏–π: ${10 - this.swipeCount}`;
        this.egg.classList.add('swipe-hit');
        setTimeout(() => this.egg.classList.remove('swipe-hit'), 300);

        if (this.swipeCount >= 4) this.egg.classList.add('crack1');
        if (this.swipeCount >= 7) this.egg.classList.add('crack2');
        if (this.swipeCount >= 10) this.hatchEgg();
    }

    hatchEgg() {
        this.cracked = true;
        this.egg.classList.add('cracked', 'hidden');

        setTimeout(() => {
            const pet = this.generateRandomPet();
            this.showPet(pet);
            this.sendTelegramData(pet);
        }, 800);
    }

    generateRandomPet() {
        const index = Math.floor(Math.random() * 19) + 1; // –û—Ç 1 –¥–æ 19
        const uniqueNames = [
            "–ë–∞—Ä—Å–∏–∫", "–ú—É—Ä–∑–∏–∫", "–®–∞—Ä–∏–∫", "–°–Ω–µ–∂–æ–∫", "–†—ã–∂–∏–∫",
            "–ó–≤—ë–∑–¥–æ—á–∫–∞", "–ü—É—à–∏—Å—Ç–∏–∫", "–õ—É–Ω—Ç–∏–∫", "–°–ø–∞—Ä–∫–∏", "–¢—É—á–∫–∞",
            "–ö–æ–º–µ—Ç–∞", "–ë—É—Å–∏–Ω–∫–∞", "–í—É–ª–∫–∞–Ω", "–ú–∞—Ä—Å–∏–∫", "–°–∏–º–±–∞",
            "–¢–∏–≥—Ä–∞", "–ü–µ—Ä—Å–∏–∫", "–û–±–ª–∞—á–∫–æ", "–§–µ–Ω–∏–∫—Å"
        ];
        return {
            name: uniqueNames[index - 1], // –ò–Ω–¥–µ–∫—Å—ã 0-18 –¥–ª—è 19 –∏–º–µ–Ω
            img: `pets/pet${index}.png`
        };
    }

    hatchEgg() {
        this.cracked = true;
        this.egg.classList.add('cracked', 'hidden');
        this.container.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —è–π—Ü–æ–º
        
        setTimeout(() => {
            const pet = this.generateRandomPet();
            this.showPet(pet);
            this.sendTelegramData(pet);
        }, 800);
    }

    showPet(pet) {
        this.petContainer.innerHTML = `
            <img src="${pet.img}" class="pet">
            <div class="pet-name">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ ${pet.name} üêæ</div>
        `;
        this.petContainer.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    }
}

    sendTelegramData(pet) {
        try {
            if (window.Telegram?.WebApp?.sendData) {
                window.Telegram.WebApp.sendData(JSON.stringify({
                    level: 1,
                    actions: this.swipeCount,
                    pet: pet.name
                }));
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e);
        }
    }

window.addEventListener('DOMContentLoaded', () => new EggGame());
